# Nginx configuration for Inspektor production deployment
# Load balancing across multiple server instances

upstream inspektor_backend {
    least_conn;  # Use least connections load balancing

    # Docker Compose creates these service replicas
    server inspektor-server-prod:8000 max_fails=3 fail_timeout=30s;

    # Add more servers if scaling
    # server inspektor-server-2:8000 max_fails=3 fail_timeout=30s;
    # server inspektor-server-3:8000 max_fails=3 fail_timeout=30s;

    keepalive 32;
}

# Rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=health_limit:10m rate=100r/s;

server {
    listen 80;
    server_name localhost;  # Change to your domain

    # Redirect HTTP to HTTPS in production
    # return 301 https://$server_name$request_uri;

    # Client settings
    client_max_body_size 10M;
    client_body_timeout 60s;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 300s;  # Long timeout for LLM queries

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Health check endpoint (no rate limit)
    location /health {
        limit_req zone=health_limit burst=20;
        proxy_pass http://inspektor_backend;
    }

    # API endpoints
    location / {
        limit_req zone=api_limit burst=20 nodelay;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        proxy_pass http://inspektor_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }

    # Status endpoint for monitoring
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}

# HTTPS server (uncomment for production with SSL certificates)
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#
#     ssl_certificate /etc/nginx/certs/fullchain.pem;
#     ssl_certificate_key /etc/nginx/certs/privkey.pem;
#
#     # Modern SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
#     ssl_prefer_server_ciphers off;
#
#     # HSTS
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
#
#     # Same location blocks as HTTP server
#     location / {
#         limit_req zone=api_limit burst=20 nodelay;
#         proxy_pass http://inspektor_backend;
#         # ... other proxy settings
#     }
# }
