name: Build Windows Release

on:
  # Trigger on tags for releases
  push:
    tags:
      - 'v*.*.*'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.1.0)'
        required: false
        default: '0.1.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: client/src-tauri

      - name: Install frontend dependencies
        working-directory: client
        run: npm ci

      - name: Create production environment file
        working-directory: client
        shell: bash
        run: |
          echo "VITE_API_URL=https://inspektor.hmartin.dev" > .env.production
          echo "VITE_ENV=production" >> .env.production
          cat .env.production

      - name: Build Tauri app
        working-directory: client
        run: npm run tauri build
        env:
          # Use production backend URL
          VITE_API_URL: https://inspektor.hmartin.dev

      - name: List build artifacts
        working-directory: client/src-tauri/target/release
        shell: bash
        run: |
          echo "=== Build Artifacts ==="
          ls -lh
          echo ""
          echo "=== Bundle Directory ==="
          ls -lh bundle/
          echo ""
          if [ -d "bundle/msi" ]; then
            echo "=== MSI Installer ==="
            ls -lh bundle/msi/
          fi
          if [ -d "bundle/nsis" ]; then
            echo "=== NSIS Installer ==="
            ls -lh bundle/nsis/
          fi

      - name: Upload MSI Installer
        uses: actions/upload-artifact@v4
        with:
          name: inspektor-windows-msi
          path: client/src-tauri/target/release/bundle/msi/*.msi
          if-no-files-found: warn

      - name: Upload NSIS Installer
        uses: actions/upload-artifact@v4
        with:
          name: inspektor-windows-nsis
          path: client/src-tauri/target/release/bundle/nsis/*.exe
          if-no-files-found: warn

      - name: Upload Portable Executable
        uses: actions/upload-artifact@v4
        with:
          name: inspektor-windows-exe
          path: client/src-tauri/target/release/inspektor.exe
          if-no-files-found: error

  # Create GitHub Release if triggered by tag
  release:
    name: Create GitHub Release
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download MSI artifact
        uses: actions/download-artifact@v4
        with:
          name: inspektor-windows-msi
          path: ./artifacts/msi

      - name: Download NSIS artifact
        uses: actions/download-artifact@v4
        with:
          name: inspektor-windows-nsis
          path: ./artifacts/nsis

      - name: Download EXE artifact
        uses: actions/download-artifact@v4
        with:
          name: inspektor-windows-exe
          path: ./artifacts/exe

      - name: List artifacts
        run: |
          echo "=== Downloaded Artifacts ==="
          find ./artifacts -type f -ls

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Inspektor v${{ steps.version.outputs.VERSION }}
          body: |
            # Inspektor v${{ steps.version.outputs.VERSION }}

            ## Windows Installation

            ### For End Users (Recommended)
            Download and run the **NSIS Installer** (.exe):
            - `Inspektor_${{ steps.version.outputs.VERSION }}_x64-setup.exe`

            ### For IT/Enterprise
            Use the **MSI Installer** for silent deployment:
            - `Inspektor_${{ steps.version.outputs.VERSION }}_x64_en-US.msi`

            ### Portable Version
            Download the standalone executable (no installation required):
            - `inspektor.exe`

            ## Backend Setup

            This app connects to the Inspektor backend at `https://inspektor.hmartin.dev`.

            Ensure the backend is deployed and accessible before using the app.

            ## What's New

            - Initial Windows release
            - Full database query capabilities
            - Workspace management
            - Context-aware SQL generation

            ## System Requirements

            - Windows 10 (version 1809 or later) / Windows 11
            - WebView2 Runtime (automatically installed with installer)
            - Internet connection (to connect to backend)

            ## Documentation

            - [Windows Build Guide](https://github.com/${{ github.repository }}/blob/main/WINDOWS_BUILD.md)
            - [Production Deployment](https://github.com/${{ github.repository }}/blob/main/PRODUCTION_DEPLOYMENT.md)
            - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          files: |
            ./artifacts/msi/*.msi
            ./artifacts/nsis/*.exe
            ./artifacts/exe/inspektor.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
