version: '3.8'

# Production Docker Compose configuration
# Includes resource limits, health checks, and security best practices

services:
  ollama:
    image: ollama/ollama:latest
    container_name: inspektor-ollama-prod
    ports:
      - "127.0.0.1:11434:11434"  # Bind to localhost only
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=1
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_FLASH_ATTENTION=1
    networks:
      - inspektor-network
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 12G
        reservations:
          cpus: '2'
          memory: 8G
      # Uncomment for GPU support
      # resources:
      #   reservations:
      #     devices:
      #       - driver: nvidia
      #         count: 1
      #         capabilities: [gpu]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ollama-pull-mistral:
    image: ollama/ollama:latest
    container_name: inspektor-ollama-pull-prod
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - inspektor-network
    environment:
      - OLLAMA_HOST=ollama:11434
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Checking if Mistral 7B is already downloaded..."
        if ollama list | grep -q "mistral:7b"; then
          echo "✓ Mistral 7B already exists"
        else
          echo "Pulling Mistral 7B model..."
          ollama pull mistral:7b
          echo "✓ Mistral 7B downloaded successfully"
        fi
    restart: "no"

  inspektor-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-unknown}
        - VERSION=${VERSION:-latest}
    image: inspektor-server:${VERSION:-latest}
    container_name: inspektor-server-prod
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only (use reverse proxy)
    depends_on:
      ollama:
        condition: service_healthy
      ollama-pull-mistral:
        condition: service_completed_successfully
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=mistral:7b
      - HOST=0.0.0.0
      - PORT=8000
    networks:
      - inspektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      replicas: 2  # Run 2 instances for redundancy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Nginx reverse proxy (optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: inspektor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - inspektor-server
    networks:
      - inspektor-network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - with-proxy

networks:
  inspektor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  ollama_data:
    driver: local
