version: "3.8"

# Production Docker Compose configuration for VPS Deployment
# This assumes nginx is running on the host VPS
# Backend binds to localhost:8000 only, nginx proxies to it
# Includes resource limits, health checks, and security best practices

services:
  # PostgreSQL Database (production)
  postgres:
    image: postgres:16-alpine
    container_name: inspektor-postgres-prod
    ports:
      - "127.0.0.1:7654:5432"  # Bind to localhost only (external:internal)
    environment:
      - POSTGRES_DB=inspektor
      - POSTGRES_USER=inspektor
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}  # Override in .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./server/scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - inspektor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inspektor"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security options
    security_opt:
      - no-new-privileges:true

  inspektor-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-unknown}
        - VERSION=${VERSION:-latest}
    image: inspektor-server:${VERSION:-latest}
    container_name: inspektor-server-prod
    ports:
      - "127.0.0.1:8090:8090" # Bind to localhost only (use reverse proxy)
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./server/.env # Load from .env file (copied from .env.production during deployment)
    environment:
      - DATABASE_URL=postgresql://inspektor:${POSTGRES_PASSWORD:-changeme}@postgres:5432/inspektor
      - HOST=0.0.0.0
      - PORT=8090
    networks:
      - inspektor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    volumes:
      - inspektor_logs:/app/logs # Persist application logs
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
        reservations:
          cpus: "1"
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true  # Enabled now that we use PostgreSQL (no file writes)
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Note: Nginx is running on the host VPS, not in Docker
  # See nginx-vps.conf for the host nginx configuration

networks:
  inspektor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  inspektor_logs:
    driver: local
