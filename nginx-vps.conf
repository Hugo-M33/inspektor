# Nginx Configuration for Inspektor Production (VPS)
# Place this file in: /etc/nginx/sites-available/inspektor
# Then: sudo ln -s /etc/nginx/sites-available/inspektor /etc/nginx/sites-enabled/
# Test: sudo nginx -t
# Reload: sudo systemctl reload nginx

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=inspektor_api:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=inspektor_health:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=inspektor_auth:10m rate=5r/s;

# Upstream backend (Docker container on localhost:8090)
upstream inspektor_backend {
    server 127.0.0.1:8090 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP server - redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name inspektor.hmartin.dev;

    # Allow Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name inspektor.hmartin.dev;

    # SSL Configuration (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/inspektor.hmartin.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/inspektor.hmartin.dev/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/inspektor.hmartin.dev/chain.pem;

    # SSL Settings - Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://api.openai.com;" always;

    # Client settings
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Timeouts - Increased for LLM operations
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 300s;  # 5 minutes for LLM queries
    send_timeout 300s;

    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_http_version 1.1;
    proxy_set_header Connection "";

    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Health check endpoint - minimal rate limiting
    location /health {
        limit_req zone=inspektor_health burst=50 nodelay;

        proxy_pass http://inspektor_backend;

        access_log off;  # Don't log health checks
    }

    # Authentication endpoints - stricter rate limiting
    location ~ ^/auth/(login|register) {
        limit_req zone=inspektor_auth burst=10 nodelay;

        proxy_pass http://inspektor_backend;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' 'tauri://localhost' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # All other API endpoints
    location / {
        limit_req zone=inspektor_api burst=20 nodelay;

        proxy_pass http://inspektor_backend;

        # CORS headers for Tauri app
        add_header 'Access-Control-Allow-Origin' 'tauri://localhost' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Add response headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header X-Backend-Server $upstream_addr;
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Logging
    access_log /var/log/nginx/inspektor_access.log combined;
    error_log /var/log/nginx/inspektor_error.log warn;
}
